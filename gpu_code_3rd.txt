res3_code = """
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <cuComplex.h>
typedef cuDoubleComplex cmplx ;
__global__ void cal_res_3rd( cmplx *F_slices, cmplx *residual_3rd, \
    cmplx *moment_3rd, double *weight_3rd, int *samples_3rd, int *info )
{
    int thread_idx, num_threads, num_iter, num_alpha ;
    int i, j, k, s1, s2, s3, idx, idx_max, idx_offset ;
    int num_grid2D, num_samples_3rd ;
    cmplx fv ;
    
    thread_idx = threadIdx.x + blockDim.x*blockIdx.x ;
    num_threads = blockDim.x*gridDim.x ;
    num_alpha = info[0] ;
    num_samples_3rd = info[1] ;
    num_grid2D = info[2] ;
    
    num_iter = num_samples_3rd / num_threads ;
    if (num_samples_3rd % num_threads != 0)
        num_iter += 1 ;

    idx = thread_idx ;
    idx_max = num_samples_3rd - 1 ;
    fv = make_cuDoubleComplex(-1, 0) ;
    for (i = 0 ; i < num_iter ; i++){
        if (idx > idx_max)
            break ;
        residual_3rd[idx] = make_cuDoubleComplex(0, 0) ;
        for (j = 0 ; j < num_alpha ; j++){
            idx_offset = j*num_grid2D ;
            k = 3*idx ;
            s1 = idx_offset + samples_3rd[k] ;
            s2 = idx_offset + samples_3rd[k+1] ;
            s3 = idx_offset + samples_3rd[k+2] ;
            residual_3rd[idx] = cuCadd(residual_3rd[idx], \
                cuCmul(F_slices[s1], cuCmul(F_slices[s2], \
                F_slices[s3]))) ;
        }
        residual_3rd[idx] = cuCadd(residual_3rd[idx], \
            cuCmul(fv, moment_3rd[idx])) ;
        residual_3rd[idx] = cuCmul(residual_3rd[idx], \
            make_cuDoubleComplex(weight_3rd[idx], 0)) ;
        idx += num_threads ;
    }
}
"""


Jvec3_code = """
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <cuComplex.h>
typedef cuDoubleComplex cmplx ;
__global__ void cal_Jvec_3rd( cmplx *F_slices, cmplx *residual_3rd, \
    cmplx *Jvec_3rd, double *weight_3rd, int *adj_samp_mtx_info, \
    int *adj_samp_mtx_idx, int *samples_3rd, int *info )
{
    int thread_idx, num_threads, num_iter, total_count, offset ;
    int num_alpha, num_grid2D, alpha_idx, idx, idx_max, grid_idx ;
    int i, j, k, jmin, jmax, c1, c2, c3, s0, s1, s2, s3, samp_idx ;
    double rp, ip ;
    cmplx fv, gv ;
    
    thread_idx = threadIdx.x + blockDim.x*blockIdx.x ;
    num_threads = blockDim.x*gridDim.x ;
    num_alpha = info[0] ;
    num_grid2D = info[2] ;

    total_count = num_alpha*num_grid2D ;
    num_iter = total_count / num_threads ;
    if (total_count % num_threads != 0)
        num_iter += 1 ;

    idx = thread_idx ;
    idx_max = total_count - 1 ;
    for (i = 0 ; i < num_iter ; i++){
        if (idx > idx_max)
            break ;
        Jvec_3rd[2*idx] = make_cuDoubleComplex(0, 0) ;
        Jvec_3rd[2*idx+1] = make_cuDoubleComplex(0, 0) ;

        alpha_idx = idx / num_grid2D ;
        grid_idx = idx % num_grid2D ;
        s0 = alpha_idx*num_grid2D ;

        j = 4*grid_idx ;
        c1 = adj_samp_mtx_info[j] ;
        c2 = adj_samp_mtx_info[j+1] ;
        c3 = adj_samp_mtx_info[j+2] ;
        offset = adj_samp_mtx_info[j+3] ;

        /* order = 1 */
        jmin = offset ;
        jmax = jmin + c1 ;
        for (j = jmin ; j < jmax ; j++){
            samp_idx = adj_samp_mtx_idx[j] ;
            rp = cuCreal(residual_3rd[samp_idx])*weight_3rd[samp_idx] ;
            ip = cuCimag(residual_3rd[samp_idx])*weight_3rd[samp_idx] ;
            k = 3*samp_idx ;
            s2 = s0 + samples_3rd[k+1] ;
            s3 = s0 + samples_3rd[k+2] ;
            fv = cuConj(cuCmul(F_slices[s2], F_slices[s3])) ;
            k = 2*idx ;
            gv = make_cuDoubleComplex(rp, 0) ;
            Jvec_3rd[k] = cuCadd(Jvec_3rd[k], cuCmul(fv, gv)) ;
            gv = make_cuDoubleComplex(ip, 0) ;
            Jvec_3rd[k+1] = cuCadd(Jvec_3rd[k+1], cuCmul(fv, gv)) ;
        }

        /* order = 2 */
        jmin = jmax ;
        jmax += c2 ;
        for (j = jmin ; j < jmax ; j++){
            samp_idx = adj_samp_mtx_idx[j] ;
            rp = cuCreal(residual_3rd[samp_idx])*weight_3rd[samp_idx] ;
            ip = cuCimag(residual_3rd[samp_idx])*weight_3rd[samp_idx] ;
            k = 3*samp_idx ;
            s1 = s0 + samples_3rd[k] ;
            s3 = s0 + samples_3rd[k+2] ;
            fv = cuConj(cuCmul(F_slices[s1], F_slices[s3])) ;
            k = 2*idx ;
            gv = make_cuDoubleComplex(rp, 0) ;
            Jvec_3rd[k] = cuCadd(Jvec_3rd[k], cuCmul(fv, gv)) ;
            gv = make_cuDoubleComplex(ip, 0) ;
            Jvec_3rd[k+1] = cuCadd(Jvec_3rd[k+1], cuCmul(fv, gv)) ;
        }

        /* order = 3 */
        jmin = jmax ;
        jmax += c3 ;
        for (j = jmin ; j < jmax ; j++){
            samp_idx = adj_samp_mtx_idx[j] ;
            rp = cuCreal(residual_3rd[samp_idx])*weight_3rd[samp_idx] ;
            ip = cuCimag(residual_3rd[samp_idx])*weight_3rd[samp_idx] ;
            k = 3*samp_idx ;
            s1 = s0 + samples_3rd[k] ;
            s2 = s0 + samples_3rd[k+1] ;
            fv = cuConj(cuCmul(F_slices[s1], F_slices[s2])) ;
            k = 2*idx ;
            gv = make_cuDoubleComplex(rp, 0) ;
            Jvec_3rd[k] = cuCadd(Jvec_3rd[k], cuCmul(fv, gv)) ;
            gv = make_cuDoubleComplex(ip, 0) ;
            Jvec_3rd[k+1] = cuCadd(Jvec_3rd[k+1], cuCmul(fv, gv)) ;
        }
        idx += num_threads ;
    }
}
"""
